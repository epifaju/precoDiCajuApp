#!/usr/bin/env pwsh

Write-Host "üîß Test des corrections CORS et timeout API" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

# V√©rifier que le backend est d√©marr√©
Write-Host "`n1. V√©rification du backend (port 8080)..." -ForegroundColor Yellow
try {
    $backendResponse = Invoke-RestMethod -Uri "http://localhost:8080/actuator/health" -Method GET -TimeoutSec 10
    Write-Host "‚úÖ Backend accessible: $($backendResponse.status)" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Backend non accessible: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Veuillez d√©marrer le backend avant de continuer" -ForegroundColor Yellow
    exit 1
}

# Test des endpoints probl√©matiques
Write-Host "`n2. Test des endpoints exportateurs..." -ForegroundColor Yellow

$endpoints = @(
    @{ Name = "Exportateurs"; Url = "http://localhost:8080/api/v1/exportateurs" },
    @{ Name = "R√©gions"; Url = "http://localhost:8080/api/v1/regions" },
    @{ Name = "Qualit√©s"; Url = "http://localhost:8080/api/v1/qualities" }
)

foreach ($endpoint in $endpoints) {
    try {
        Write-Host "   Test de $($endpoint.Name)..." -NoNewline
        $response = Invoke-RestMethod -Uri $endpoint.Url -Method GET -TimeoutSec 15
        Write-Host " ‚úÖ Succ√®s" -ForegroundColor Green
        
        # Afficher quelques informations sur la r√©ponse
        if ($response -is [array]) {
            Write-Host "      Nombre d'√©l√©ments: $($response.Count)" -ForegroundColor Gray
        }
        elseif ($response.content -is [array]) {
            Write-Host "      Nombre d'√©l√©ments: $($response.content.Count)" -ForegroundColor Gray
        }
    }
    catch {
        Write-Host " ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
        
        # Analyser le type d'erreur
        if ($_.Exception.Message -like "*CORS*") {
            Write-Host "      ‚Üí Probl√®me CORS d√©tect√©" -ForegroundColor Red
        }
        elseif ($_.Exception.Message -like "*timeout*") {
            Write-Host "      ‚Üí Timeout d√©tect√©" -ForegroundColor Red
        }
        elseif ($_.Exception.Message -like "*404*") {
            Write-Host "      ‚Üí Endpoint non trouv√©" -ForegroundColor Red
        }
    }
}

# Test des headers CORS
Write-Host "`n3. Test des headers CORS..." -ForegroundColor Yellow

try {
    $corsTest = Invoke-WebRequest -Uri "http://localhost:8080/api/v1/exportateurs" -Method OPTIONS -Headers @{
        "Origin"                         = "http://localhost:3001"
        "Access-Control-Request-Method"  = "GET"
        "Access-Control-Request-Headers" = "Content-Type"
    } -TimeoutSec 10

    Write-Host "‚úÖ Requ√™te preflight OPTIONS r√©ussie" -ForegroundColor Green
    Write-Host "   Status: $($corsTest.StatusCode)" -ForegroundColor Gray
    
    # V√©rifier les headers CORS
    $corsHeaders = @(
        "Access-Control-Allow-Origin",
        "Access-Control-Allow-Methods", 
        "Access-Control-Allow-Headers",
        "Access-Control-Max-Age"
    )
    
    foreach ($header in $corsHeaders) {
        if ($corsTest.Headers[$header]) {
            Write-Host "   $header : $($corsTest.Headers[$header])" -ForegroundColor Gray
        }
        else {
            Write-Host "   ‚ö†Ô∏è  Header $header manquant" -ForegroundColor Yellow
        }
    }
}
catch {
    Write-Host "‚ùå Test CORS √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
}

# Test de performance (timeout)
Write-Host "`n4. Test de performance..." -ForegroundColor Yellow

try {
    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/exportateurs" -Method GET -TimeoutSec 20
    $stopwatch.Stop()
    
    $responseTime = $stopwatch.ElapsedMilliseconds
    Write-Host "‚úÖ Temps de r√©ponse: ${responseTime}ms" -ForegroundColor Green
    
    if ($responseTime -lt 5000) {
        Write-Host "   ‚Üí Excellent (moins de 5s)" -ForegroundColor Green
    }
    elseif ($responseTime -lt 10000) {
        Write-Host "   ‚Üí Bon (moins de 10s)" -ForegroundColor Yellow
    }
    else {
        Write-Host "   ‚Üí Lent (plus de 10s)" -ForegroundColor Red
    }
}
catch {
    Write-Host "‚ùå Test de performance √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéØ R√©sum√© des tests:" -ForegroundColor Cyan
Write-Host "- Backend accessible: ‚úÖ" -ForegroundColor Green
Write-Host "- Endpoints exportateurs: Test√©s" -ForegroundColor Yellow  
Write-Host "- Configuration CORS: V√©rifi√©e" -ForegroundColor Yellow
Write-Host "- Performance: Mesur√©e" -ForegroundColor Yellow

Write-Host "`nüí° Prochaines √©tapes:" -ForegroundColor Cyan
Write-Host "1. D√©marrer le frontend: npm run dev (port 3001)" -ForegroundColor White
Write-Host "2. Tester l'application dans le navigateur" -ForegroundColor White
Write-Host "3. V√©rifier la console pour les erreurs CORS" -ForegroundColor White

Write-Host "`n‚úÖ Test termin√©!" -ForegroundColor Green