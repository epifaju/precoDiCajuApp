# Script pour mettre √† jour les dates d'expiration via l'API
Write-Host "Mise √† jour des dates d'expiration des exportateurs" -ForegroundColor Cyan
Write-Host "=====================================================" -ForegroundColor Cyan

$baseUrl = "http://localhost:8080/api/v1/exportateurs"

# Fonction pour mettre √† jour un exportateur
function Update-ExportateurDate {
    param(
        [string]$id,
        [string]$nom,
        [string]$newExpirationDate
    )
    
    try {
        Write-Host "Mise √† jour: $nom" -ForegroundColor Yellow
        Write-Host "  Nouvelle date: $newExpirationDate" -ForegroundColor Gray
        
        $updateData = @{
            dateExpiration = $newExpirationDate
        } | ConvertTo-Json
        
        $headers = @{
            "Content-Type" = "application/json"
            "Accept"       = "application/json"
        }
        
        $response = Invoke-WebRequest -Uri "$baseUrl/$id" -Method PUT -Body $updateData -Headers $headers -UseBasicParsing
        
        if ($response.StatusCode -eq 200) {
            Write-Host "  ‚úÖ Succ√®s" -ForegroundColor Green
            return $true
        }
        else {
            Write-Host "  ‚ùå Erreur HTTP: $($response.StatusCode)" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "  ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# R√©cup√©rer tous les exportateurs
try {
    Write-Host "R√©cup√©ration des exportateurs..." -ForegroundColor Magenta
    $response = Invoke-WebRequest -Uri "$baseUrl?size=100" -Headers @{"Accept" = "application/json" } -UseBasicParsing
    $data = $response.Content | ConvertFrom-Json
    $exportateurs = $data.content
    
    Write-Host "Trouv√© $($exportateurs.Count) exportateurs" -ForegroundColor Gray
    
    # Mettre √† jour chaque exportateur
    $successCount = 0
    $failCount = 0
    
    foreach ($exportateur in $exportateurs) {
        # G√©n√©rer une nouvelle date d'expiration (1 an dans le futur)
        $currentDate = Get-Date
        $newExpirationDate = $currentDate.AddYears(1).ToString("yyyy-MM-dd")
        
        $success = Update-ExportateurDate -id $exportateur.id -nom $exportateur.nom -newExpirationDate $newExpirationDate
        
        if ($success) {
            $successCount++
        }
        else {
            $failCount++
        }
        
        # Pause pour √©viter de surcharger l'API
        Start-Sleep -Milliseconds 200
    }
    
    Write-Host "`nR√©sum√© des mises √† jour:" -ForegroundColor Cyan
    Write-Host "  ‚úÖ Succ√®s: $successCount" -ForegroundColor Green
    Write-Host "  ‚ùå √âchecs: $failCount" -ForegroundColor Red
    
    # V√©rifier les r√©sultats
    Write-Host "`nV√©rification des r√©sultats..." -ForegroundColor Magenta
    $response = Invoke-WebRequest -Uri "$baseUrl?size=5" -Headers @{"Accept" = "application/json" } -UseBasicParsing
    $data = $response.Content | ConvertFrom-Json
    
    Write-Host "√âtat actuel des exportateurs:" -ForegroundColor Yellow
    foreach ($exportateur in $data.content) {
        $status = if ($exportateur.actif) { "‚úÖ Actif" } elseif ($exportateur.expire) { "‚ö†Ô∏è Expir√©" } elseif ($exportateur.suspendu) { "üö´ Suspendu" } else { "‚ùì Inconnu" }
        Write-Host "  $($exportateur.nom): $status (Expire: $($exportateur.dateExpiration))" -ForegroundColor Gray
    }
    
}
catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ Script termin√©!" -ForegroundColor Green



