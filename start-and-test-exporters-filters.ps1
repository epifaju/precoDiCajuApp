#!/usr/bin/env pwsh

# Script pour d√©marrer le backend et tester les filtres avanc√©s des Exportateurs Agr√©√©s

Write-Host "=== D√©marrage et Test des Filtres Avanc√©s - Exportateurs Agr√©√©s ===" -ForegroundColor Green

# V√©rifier si le backend est d√©j√† en cours d'ex√©cution
$backendRunning = $false
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/exportateurs/test-health" -Method GET -TimeoutSec 5 -ErrorAction Stop
    $backendRunning = $true
    Write-Host "‚úÖ Backend d√©j√† en cours d'ex√©cution" -ForegroundColor Green
}
catch {
    Write-Host "‚ö†Ô∏è Backend non d√©marr√©, d√©marrage en cours..." -ForegroundColor Yellow
}

# D√©marrer le backend si n√©cessaire
if (-not $backendRunning) {
    Write-Host "`nüöÄ D√©marrage du backend..." -ForegroundColor Blue
    
    # Changer vers le r√©pertoire backend
    Set-Location "backend"
    
    # D√©marrer le backend en arri√®re-plan
    $backendProcess = Start-Process -FilePath "mvn" -ArgumentList "spring-boot:run" -NoNewWindow -PassThru
    
    Write-Host "Backend en cours de d√©marrage (PID: $($backendProcess.Id))..." -ForegroundColor Yellow
    
    # Attendre que le backend soit pr√™t
    $maxWait = 60 # 60 secondes max
    $waitTime = 0
    
    do {
        Start-Sleep -Seconds 2
        $waitTime += 2
        
        try {
            $response = Invoke-RestMethod -Uri "http://localhost:8080/api/v1/exportateurs/test-health" -Method GET -TimeoutSec 5 -ErrorAction Stop
            Write-Host "‚úÖ Backend pr√™t apr√®s $waitTime secondes!" -ForegroundColor Green
            $backendRunning = $true
            break
        }
        catch {
            Write-Host "." -NoNewline -ForegroundColor Gray
        }
    } while ($waitTime -lt $maxWait)
    
    if (-not $backendRunning) {
        Write-Host "`n‚ùå Timeout: Le backend n'a pas d√©marr√© dans les $maxWait secondes" -ForegroundColor Red
        Write-Host "Arr√™t du processus..." -ForegroundColor Yellow
        Stop-Process -Id $backendProcess.Id -Force
        exit 1
    }
    
    # Revenir au r√©pertoire racine
    Set-Location ".."
}

# Attendre un peu pour s'assurer que tout est pr√™t
Start-Sleep -Seconds 3

Write-Host "`nüß™ Ex√©cution des tests de filtres..." -ForegroundColor Blue

# Ex√©cuter le script de test
if (Test-Path "test-exporters-filters-fix.ps1") {
    Write-Host "Ex√©cution du script de test..." -ForegroundColor Cyan
    & ".\test-exporters-filters-fix.ps1"
}
else {
    Write-Host "‚ùå Script de test non trouv√©: test-exporters-filters-fix.ps1" -ForegroundColor Red
}

Write-Host "`n=== Instructions pour tester l'interface frontend ===" -ForegroundColor Green
Write-Host "1. Ouvrez le fichier 'test-exporters-filters-frontend.html' dans votre navigateur" -ForegroundColor White
Write-Host "2. Ou d√©marrez le frontend avec: npm start (dans le dossier frontend)" -ForegroundColor White
Write-Host "3. Naviguez vers /exporters et testez les filtres avanc√©s" -ForegroundColor White

Write-Host "`n=== R√©sum√© des corrections apport√©es ===" -ForegroundColor Blue
Write-Host "‚úÖ Ajout d'une nouvelle m√©thode findWithAllFilters dans ExportateurRepository" -ForegroundColor Green
Write-Host "‚úÖ Correction du service ExportateurService pour utiliser tous les filtres" -ForegroundColor Green
Write-Host "‚úÖ Support des filtres: r√©gion, type, statut, nom" -ForegroundColor Green
Write-Host "‚úÖ Conversion automatique des param√®tres String en enum" -ForegroundColor Green
Write-Host "‚úÖ Gestion des erreurs pour les param√®tres invalides" -ForegroundColor Green

Write-Host "`nüéâ Les filtres avanc√©s des Exportateurs Agr√©√©s sont maintenant op√©rationnels !" -ForegroundColor Green
